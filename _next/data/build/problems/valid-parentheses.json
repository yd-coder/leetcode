{"pageProps":{"problem":{"id":"valid-parentheses","title":"4. Valid Parentheses","difficulty":"Easy","likes":6,"dislikes":0,"problemStatement":"<p class='mt-3'>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p class='mt-3'>An input string is valid if:</p> <ul> <li class='mt-2'>Open brackets must be closed by the same type of brackets.</li> <li class='mt-3'>Open brackets must be closed in the correct order.</li>\n\t<li class=\"mt-3\">Every close bracket has a corresponding open bracket of the same type. </li>\n\t</ul>","examples":[{"id":0,"inputText":"s = \"()\"","outputText":"true"},{"id":1,"inputText":"s = \"()[]{}\"","outputText":"true"},{"id":2,"inputText":"s = \"(]\"","outputText":"false"},{"id":3,"inputText":"s = \"([)]\"","outputText":"false"}],"constraints":"<li class='mt-2'><code>1 <= s.length <= 10<sup>4</sup></code></li>\n<li class='mt-2 '><code>s</code> consists of parentheses only <code class=\"text-md\">'()[]{}'</code>.</li>","handlerFunction":"(fn)=>{\n    try {\n        const tests = [\n            \"()\",\n            \"()[]{}\",\n            \"(]\",\n            \"([)]\",\n            \"{[]}\"\n        ];\n        const answers = [\n            true,\n            true,\n            false,\n            false,\n            true\n        ];\n        for(let i = 0; i < tests.length; i++){\n            const result = fn(tests[i]);\n            external_assert_default().deepEqual(result, answers[i]);\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error from validParenthesesHandler: \", error);\n        throw new Error(error);\n    }\n}","starterCode":"function validParentheses(s) {\n  // Write your code here\n};","starterFunctionName":"function validParentheses(","order":4}},"__N_SSG":true}