{"pageProps":{"problem":{"id":"search-a-2d-matrix","title":"5. Search a 2D Matrix","difficulty":"Hard","likes":3,"dislikes":0,"problemStatement":"\n  <p class='mt-3'>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p>\n    <li class=\"mt-3\">Integers in each row are sorted from left to right.</li>\n    <li class=\"mt-3\">The first integer of each row is greater than the last integer of the previous row.</li>\n  <p class='mt-3'>Given <code>matrix</code>, an <code>m x n</code> matrix, and <code>target</code>, return <code>true</code> if <code>target</code> is in the matrix, and <code>false</code> otherwise.</p>\n  ","examples":[{"id":0,"inputText":"matrix = [\n  [1,3,5,7],\n  [10,11,16,20],\n  [23,30,34,60]\n], target = 3","outputText":"true","img":"/leetcode//_next/static/media/search-a-2d-1.33bdf1ab.jpg"},{"id":1,"inputText":"matrix = [\n  [1,3,5,7],\n  [10,11,16,20],\n  [23,30,34,60]\n], target = 13","outputText":"false","img":"/leetcode//_next/static/media/search-a-2d-2.0559ee09.jpg"},{"id":2,"inputText":"matrix = [[1]], target = 1","outputText":"true"}],"constraints":"\n  <li class='mt-2'><code>m == matrix.length</code></li>\n  <li class='mt-2'><code>n == matrix[i].length</code></li>\n  <li class='mt-2'><code>1 <= m, n <= 100</code></li>\n  <li class='mt-2'><code>-10<sup>4</sup> <= matrix[i][j], target <= 10<sup>4</sup></code></li>\n  ","starterCode":"// Do not edit function name\nfunction searchMatrix(matrix, target) {\n  // Write your code here\n};","handlerFunction":"(fn)=>{\n    try {\n        const tests = [\n            {\n                matrix: [\n                    [\n                        1,\n                        3,\n                        5,\n                        7\n                    ],\n                    [\n                        10,\n                        11,\n                        16,\n                        20\n                    ],\n                    [\n                        23,\n                        30,\n                        34,\n                        60\n                    ]\n                ],\n                target: 3\n            },\n            {\n                matrix: [\n                    [\n                        1,\n                        3,\n                        5,\n                        7\n                    ],\n                    [\n                        10,\n                        11,\n                        16,\n                        20\n                    ],\n                    [\n                        23,\n                        30,\n                        34,\n                        60\n                    ]\n                ],\n                target: 13\n            }\n        ];\n        const answers = [\n            true,\n            false\n        ];\n        for(let i = 0; i < tests.length; i++){\n            const result = fn(tests[i].matrix, tests[i].target);\n            external_assert_default().deepEqual(result, answers[i]);\n        }\n        return true;\n    } catch (error) {\n        console.log(\"Error from searchA2DMatrixHandler: \", error);\n        throw new Error(error);\n    }\n}","starterFunctionName":"function searchMatrix","order":5}},"__N_SSG":true}