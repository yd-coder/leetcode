{"pageProps":{"problem":{"id":"two-sum","title":"1. Two Sum","difficulty":"Easy","likes":3,"dislikes":0,"problemStatement":"<p class='mt-3'>\n  Given an array of integers <code>nums</code> and an integer <code>target</code>, return\n  <em>indices of the two numbers such that they add up to</em> <code>target</code>.\n</p>\n<p class='mt-3'>\n  You may assume that each input would have <strong>exactly one solution</strong>, and you\n  may not use thesame element twice.\n</p>\n<p class='mt-3'>You can return the answer in any order.</p>","examples":[{"id":1,"inputText":"nums = [2,7,11,15], target = 9","outputText":"[0,1]","explanation":"Because nums[0] + nums[1] == 9, we return [0, 1]."},{"id":2,"inputText":"nums = [3,2,4], target = 6","outputText":"[1,2]","explanation":"Because nums[1] + nums[2] == 6, we return [1, 2]."},{"id":3,"inputText":" nums = [3,3], target = 6","outputText":"[0,1]"}],"constraints":"<li class='mt-2'>\n  <code>2 ≤ nums.length ≤ 10</code>\n</li> <li class='mt-2'>\n<code>-10 ≤ nums[i] ≤ 10</code>\n</li> <li class='mt-2'>\n<code>-10 ≤ target ≤ 10</code>\n</li>\n<li class='mt-2 text-sm'>\n<strong>Only one valid answer exists.</strong>\n</li>","handlerFunction":"(fn)=>{\n    // fn is the callback that user's code is passed into\n    try {\n        const nums = [\n            [\n                2,\n                7,\n                11,\n                15\n            ],\n            [\n                3,\n                2,\n                4\n            ],\n            [\n                3,\n                3\n            ]\n        ];\n        const targets = [\n            9,\n            6,\n            6\n        ];\n        const answers = [\n            [\n                0,\n                1\n            ],\n            [\n                1,\n                2\n            ],\n            [\n                0,\n                1\n            ]\n        ];\n        // loop all tests to check if the user's code is correct\n        for(let i = 0; i < nums.length; i++){\n            // result is the output of the user's function and answer is the expected output\n            const result = fn(nums[i], targets[i]);\n            external_assert_default().deepStrictEqual(result, answers[i]);\n        }\n        return true;\n    } catch (error) {\n        console.log(\"twoSum handler function error\");\n        throw new Error(error);\n    }\n}","starterCode":"function twoSum(nums,target){\n  // Write your code here\n};","order":1,"starterFunctionName":"function twoSum("}},"__N_SSG":true}