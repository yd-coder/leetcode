{"pageProps":{"problem":{"id":"reverse-linked-list","title":"2. Reverse Linked List","difficulty":"Hard","likes":2,"dislikes":0,"problemStatement":"<p class='mt-3'>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\t","examples":[{"id":0,"inputText":"head = [1,2,3,4,5]","outputText":"[5,4,3,2,1]","img":"/leetcode//_next/static/media/reverseLL.00d07f65.jpg"},{"id":1,"inputText":"head = [1,2,3]","outputText":"[3,2,1]"},{"id":2,"inputText":"head = [1]","outputText":"[1]"}],"constraints":"<li class='mt-2'>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n<li class='mt-2'><code>-5000 <= Node.val <= 5000</code></li>","starterCode":"\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n// Do not edit function name\nfunction reverseLinkedList(head) {\n  // Write your code here\n};","handlerFunction":"(fn)=>{\n    try {\n        const tests = [\n            [\n                1,\n                2,\n                3,\n                4,\n                5\n            ],\n            [\n                5,\n                4,\n                3,\n                2,\n                1\n            ],\n            [\n                1,\n                2,\n                3\n            ],\n            [\n                1\n            ]\n        ];\n        const answers = [\n            [\n                5,\n                4,\n                3,\n                2,\n                1\n            ],\n            [\n                1,\n                2,\n                3,\n                4,\n                5\n            ],\n            [\n                3,\n                2,\n                1\n            ],\n            [\n                1\n            ]\n        ];\n        for(let i = 0; i < tests.length; i++){\n            const list = createLinkedList(tests[i]);\n            const result = fn(list);\n            external_assert_default().deepEqual(getListValues(result), answers[i]);\n        }\n        return true;\n    } catch (error) {\n        console.log(\"Error from reverseLinkedListHandler: \", error);\n        throw new Error(error);\n    }\n}","starterFunctionName":"function reverseLinkedList(","order":2}},"__N_SSG":true}